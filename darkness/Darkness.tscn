[gd_scene load_steps=5 format=2]

[ext_resource path="res://darkness/Darkness.gd" type="Script" id=1]
[ext_resource path="res://darkness/images/darkness.png" type="Texture" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

const float PI = 3.1415926;
const float MAX_DISTANCE = 1.414;

uniform float max_darkness = 1.0;
uniform float beam_width_measured_in_distance_behind_player = 0.15;

uniform vec2 flashlight_direction = vec2(1.0, 0.0);
uniform vec3 player;
uniform vec3 fixed1;
uniform vec3 fixed2;
uniform vec3 fixed3;
uniform vec3 fixed4;
uniform vec3 fixed5;
uniform vec3 fixed6;
uniform vec3 fixed7;
uniform vec3 fixed8;
uniform vec3 fixed9;
uniform vec3 fixed10;

float fixed_dist(vec2 uv, vec3 fixy) {
	float radius = fixy.z;
	float dist = distance(uv, fixy.xy);
	return smoothstep(radius / 4.0, radius, dist);
}

float minfixed(vec2 uv) {
	float f = fixed_dist(uv, fixed1);
	f *= fixed_dist(uv, fixed2);
	f *= fixed_dist(uv, fixed3);
	f *= fixed_dist(uv, fixed4);
	f *= fixed_dist(uv, fixed5);
	f *= fixed_dist(uv, fixed6);
	f *= fixed_dist(uv, fixed7);
	f *= fixed_dist(uv, fixed8);
	f *= fixed_dist(uv, fixed9);
	f *= fixed_dist(uv, fixed10);
	return f;
}

float beamdist(vec2 uv) {
	float desired_angle = atan(flashlight_direction.y, flashlight_direction.x);
	vec2 simulated_pos = player.xy - (flashlight_direction * beam_width_measured_in_distance_behind_player);
	float dist_to_sim = distance(uv, simulated_pos);
	// 1 IFF we're \"behind\" the player instead of in front of them.
	float is_behind = step(dist_to_sim, beam_width_measured_in_distance_behind_player);
	//is_behind = 0.0;
	
	vec2 dist = uv - (player.xy - (flashlight_direction * beam_width_measured_in_distance_behind_player));
	dist = normalize(dist);
	float my_angle = atan(dist.y, dist.x);
	float diff1 = abs(my_angle - desired_angle);
	float diff2 = abs(diff1 - 2.0 * PI);
	float diff = min(diff1, diff2);
	
	return max(is_behind, smoothstep(0.0, PI/12.0, diff));
}

void fragment () {
	COLOR = texture(TEXTURE, UV);
	
	float player_radius = fixed_dist(UV, player);
	float fixed_radius = minfixed(UV);
	float beamclose = beamdist(UV);
	COLOR.a = player_radius * fixed_radius * beamclose;
	COLOR.a = min(COLOR.a, max_darkness);
	
	//vec2 multed = UV * 4.0;
	//vec2 uv = fract(multed);
//	float col = floor(multed.x);
//	float row = floor(multed.y);
//	float idx = col + 4.0 * row;
	//float dist = distance(uv, vec2(0.5, 0.5));
	//float time = TIME * dist;
	
	//float cycle = 1.0 + abs(sin(TIME / 5.0) * 0.5);
	// abs(sin(TIME / 2.0) * sin(dist_to_player));
//	float time = TIME % (PI * 2.0);
//	float cycle = 1.0 + abs(sin(dist_to_player / 5.0) * 0.1);
	
	//COLOR.a *= cycle;
	
	
	//COLOR.r += (1.0 - fixed_radius) * 0.5;
//
//	float beamclose = 1.0 - beamdist(UV);
//	radius = 1.0 - radius;
//	float alpha =smoothstep(0.0, 1.0, 1.0 - beamclose - radius);
//	float dist2 = abs(distance(UV, flashlight_direction));
//	COLOR.a = alpha;
	
//	vec2 foo = normalize(vec2(0.5, -0.5));
//	float angle = atan(foo.y, foo.x);
//	float yup = step(UV.y, 0.1) * step(UV.x, 0.1) * step(3.1, angle);
//	COLOR.r = 1.0 * yup + COLOR.r;
//	float dup = step(0.9, UV.y) * step(UV.x, 0.1) * step(-PI / 2.0, angle);
//	COLOR.b = 1.0 * dup + COLOR.b;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/max_darkness = 1.0
shader_param/beam_width_measured_in_distance_behind_player = 0.15
shader_param/flashlight_direction = Vector2( 1, 0 )
shader_param/player = null
shader_param/fixed1 = null
shader_param/fixed2 = null
shader_param/fixed3 = null
shader_param/fixed4 = null
shader_param/fixed5 = null
shader_param/fixed6 = null
shader_param/fixed7 = null
shader_param/fixed8 = null
shader_param/fixed9 = null
shader_param/fixed10 = null

[node name="Darkness" type="Node2D"]
script = ExtResource( 1 )

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 2 )
position = Vector2( -1, 0 )
scale = Vector2( 1.002, 1 )
texture = ExtResource( 2 )
centered = false
